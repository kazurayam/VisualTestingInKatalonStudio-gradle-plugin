/*
 * visualtesinginks-gradle-plugin/build.gradle
 *
 */

// applying community plugins
plugins {
    id 'com.gradle.plugin-publish' version '0.10.1'
}

group = 'com.kazurayam'
jar.baseName = 'visualtestinginks-gradle-plugin'
version = '0.0.0'

// applying built-in plugins
apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

ext {
    artifactId = 'visualtestinginks'

    slf4jVersion = '1.7.2'
    spockVersion = '1.3-groovy-2.5'
}

repositories {
    jcenter()
}

dependencies {
    // https://mvnrepository.com/artifact/de.undercouch/gradle-download-task
    implementation group: 'de.undercouch', name: 'gradle-download-task', version: '3.4.3'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testImplementation gradleTestKit()
    testImplementation group: 'org.spockframework', name: 'spock-core', version: "${spockVersion}"
}


pluginBundle {
    website = 'https://github.com/kazurayam/visualtestinginks-gradle-plugin'
    vcsUrl  = 'https://github.com/kazurayam/visualtestinginks-gradle-plugin.git'
    tags    = [ 'katalon', 'katalon-studio', 'webdriver', 'automated-testing' ]
}

// configuration for java-gradle-plugin
gradlePlugin {
    plugins {
        visualtestinginks {
            id = "com.github.kazurayam.visualtestinginks"
            version = "${version}"
            displayName = "A Gradle Plugin for Visual Testing in Katalon Studio"
            description = "This Gradle Plugin provides \"vtimport\" task and \"vtupdate\" task that brigns the components for the Visual Testing features into your Katalon Studio project. And it also proviles \"vtexport\" task which generates the distributables that include the Visual Testing components."
            implementationClass = "com.kazurayam.visualtestinginks.gradle.VTPlugin"
        }
    }
}

publishing {
    publications {
        pluginPublication (MavenPublication) {
            from       components.java
            groupId    "${group}"
            artifactId "${artifactId}"
            version    "${version}"
        }
    }
}

publishToMavenLocal.dependsOn jar


tasks.withType(Test) {
    if (System.getProperty('http.proxyHost') != null) {
        systemProperty 'http.proxyHost' , System.getProperty('http.proxyHost')
    }
    if (System.getProperty('http.proxyPort') != null) {
        systemProperty 'http.proxyPort' , System.getProperty('http.proxyPort')
    }
    if (System.getProperty('https.proxyHost') != null) {
        systemProperty 'https.proxyHost', System.getProperty('https.proxyHost')
    }
    if (System.getProperty('https.proxyPort') != null) {
        systemProperty 'https.proxyPort', System.getProperty('https.proxyPort')
    }

}
